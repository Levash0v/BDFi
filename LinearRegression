import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_squared_error # Импорт необходимых библиотек

df = pd.read_csv('homework.csv') # Загружаем данные в переменную df из файла homework.csv
df.head()
df.describe() # Смотрим данные и переменные

fig, ax = plt.subplots(figsize=(10, 6))
correlation_matrix = df.corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True) # Построена тепловая карта для визуализации корреляции между переменными

plt.scatter(df['crim'], df['medv']) # Построить scatter график по параметрам crim, medv
plt.scatter(df['rm'], df['medv']) # Построить scatter график по параметрам rm, medv

# Для решения задачи прогнозирования средней стоимости дома в Бостоне, сформированы X и y из df, 
# на тепловой карте sns.heatmap видно что переменная medv - Средняя стоимость домов, 
# занимаемых владельцами, в 1000 долларов США, имеет высокую корреляцию с двумя другими переменными:
# lsat - % более низкого статуса населения(-0.74 высокая отрицательная корреляция)  и 
# rm - среднее количество комнат в жилище(0.69 высокая положительная корреляция)
# возьмом эти данные для обучения модели

X = pd.DataFrame(np.c_[df['lstat'], df['rm']], columns = ['lstat','rm']) # Сформированы X и y из df
y = df['medv']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Разбиты данные на данные для обучения и проверки переменная medv

model = LinearRegression()
model.fit(X, y)
model.score(X, y)
#>>> 0.6343339677660715

y_pred = model.predict(X)
mse = mean_squared_error(y, y_pred)
mse
#>>> 30.679308942517157

# Для решения задачи прогнозирования nox, уровня оксида азота, на тепловой карте видно, что
# nox - уровня оксида азота, имеет высокую корреляцию с переменными:
# indus - доля площадей под неторговую деятельность на город (0.75 высокая положительная корреляция)
# dis – взвешенные расстояния до пяти центров занятости Бостона.(-0.77 высокая отрицательная корреляция)  и 
# возьмом эти данные для обучения модели

X1 = pd.DataFrame(np.c_[df['indus'], df['dis']], columns = ['indus','dis'])
y1 = df['nox']

X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.2)

model1 = LinearRegression()
model1.fit(X1, y1)
model1.score(X1, y1)
#>>> 0.6787350496817873

y_pred1 = model1.predict(X1)
mse1 = mean_squared_error(y1, y_pred1)
mse1
#>>> 0.0042326193551385505

